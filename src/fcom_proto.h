/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _FCOM_PROTO_H_RPCGEN
#define _FCOM_PROTO_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

/* $Id: fcom_proto.x,v 1.1.1.1 2009/07/28 17:57:06 strauman Exp $ */
#include <stdint.h>
#include <fcom_api.h>
/* For testing purposes we want a second minor version */
#ifndef FCOM_PROTO_VERSION_12
#define FCOM_PROTO_VERSION_12 FCOM_PROTO_CAT(FCOM_PROTO_MAJ_1,2)
#endif
/* No point in transporting 16-bit integers.
 * XDR demands that these be encoded in 4 bytes
 */

enum FcomVersion {
	FCOM_P_VERSION_11 = FCOM_PROTO_VERSION_11,
	FCOM_P_VERSION_12 = FCOM_PROTO_VERSION_12,
};
typedef enum FcomVersion FcomVersion;

enum FcomType {
	FCOM_T_NONE = FCOM_EL_NONE,
	FCOM_T_FLOAT = FCOM_EL_FLOAT,
	FCOM_T_DOUBLE = FCOM_EL_DOUBLE,
	FCOM_T_UINT32 = FCOM_EL_UINT32,
	FCOM_T_INT32 = FCOM_EL_INT32,
	FCOM_T_INT8 = FCOM_EL_INT8,
};
typedef enum FcomType FcomType;

typedef struct {
	u_int FcomUint32_len;
	uint32_t *FcomUint32_val;
} FcomUint32;

typedef struct {
	u_int FcomInt32_len;
	int32_t *FcomInt32_val;
} FcomInt32;

typedef struct {
	u_int FcomInt8_len;
	char *FcomInt8_val;
} FcomInt8;

typedef struct {
	u_int FcomFloat_len;
	float *FcomFloat_val;
} FcomFloat;

typedef struct {
	u_int FcomDouble_len;
	double *FcomDouble_val;
} FcomDouble;

struct FcomIt {
	FcomType _type;
	union {
		FcomUint32 _fc_u32;
		FcomInt32 _fc_i32;
		FcomFloat _fc_flt;
		FcomDouble _fc_dbl;
		FcomInt8 _fc_i08;
	} FcomIt_u;
};
typedef struct FcomIt FcomIt;

struct FcomBlobV1_XDR_ {
	uint32_t idnt;
	uint32_t res3;
	uint32_t tsHi;
	uint32_t tsLo;
	uint32_t stat;
	FcomIt data;
};
typedef struct FcomBlobV1_XDR_ FcomBlobV1_XDR_;

struct FcomBlob_XDR_ {
	FcomVersion vers;
	union {
		FcomBlobV1_XDR_ _v1;
	} FcomBlob_XDR__u;
};
typedef struct FcomBlob_XDR_ FcomBlob_XDR_;

struct FcomMsg_XDR_ {
	FcomVersion vers;
	union {
		struct {
			u_int fcm_blobs_len;
			FcomBlob_XDR_ *fcm_blobs_val;
		} fcm_blobs;
	} FcomMsg_XDR__u;
};
typedef struct FcomMsg_XDR_ FcomMsg_XDR_;
#define fcx_vers vers
#define fcx_idnt idnt
#define fcx_res3 res3
#define fcx_tsHi tsHi
#define fcx_tsLo tsLo
#define fcx_stat stat
#define fcx_type data._type
#define fcx_nelm data.FcomIt_u._fc_u32.FcomUint32_len
#define fcx_u32 data.FcomIt_u._fc_u32.FcomUint32_val
#define fcx_i32 data.FcomIt_u._fc_i32.FcomInt32_val
#define fcx_i08 data.FcomIt_u._fc_i08.FcomInt8_val
#define fcx_flt data.FcomIt_u._fc_flt.FcomFloat_val
#define fcx_dbl data.FcomIt_u._fc_dbl.FcomDouble_val

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_FcomVersion (XDR *, FcomVersion*);
extern  bool_t xdr_FcomType (XDR *, FcomType*);
extern  bool_t xdr_FcomUint32 (XDR *, FcomUint32*);
extern  bool_t xdr_FcomInt32 (XDR *, FcomInt32*);
extern  bool_t xdr_FcomInt8 (XDR *, FcomInt8*);
extern  bool_t xdr_FcomFloat (XDR *, FcomFloat*);
extern  bool_t xdr_FcomDouble (XDR *, FcomDouble*);
extern  bool_t xdr_FcomIt (XDR *, FcomIt*);
extern  bool_t xdr_FcomBlobV1_XDR_ (XDR *, FcomBlobV1_XDR_*);
extern  bool_t xdr_FcomBlob_XDR_ (XDR *, FcomBlob_XDR_*);
extern  bool_t xdr_FcomMsg_XDR_ (XDR *, FcomMsg_XDR_*);

#else /* K&R C */
extern bool_t xdr_FcomVersion ();
extern bool_t xdr_FcomType ();
extern bool_t xdr_FcomUint32 ();
extern bool_t xdr_FcomInt32 ();
extern bool_t xdr_FcomInt8 ();
extern bool_t xdr_FcomFloat ();
extern bool_t xdr_FcomDouble ();
extern bool_t xdr_FcomIt ();
extern bool_t xdr_FcomBlobV1_XDR_ ();
extern bool_t xdr_FcomBlob_XDR_ ();
extern bool_t xdr_FcomMsg_XDR_ ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_FCOM_PROTO_H_RPCGEN */
